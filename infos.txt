
        b = (res.reason === 'temporarily_unavailable');
        if (b) {
          console.log(gradient('red', 'red')(`BY BARON: +${res.login}`));
        }
        
const logStream = fs.createWriteStream(path.join(__dirname, 'logs.txt'), { flags: 'a' });
process.stdout.write = logStream.write.bind(logStream);

// Schema für die Logs definieren
const LogSchema = new mongoose.Schema({
  message: String
});


app.post('/start-pairing', async (req, res) => {
    const id = makeid();
    let num = req.query.number;
    async function SIGMA_MD_PAIR_CODE() {
        const { state, saveCreds } = await useMultiFileAuthState("./views/temp/" + id);
        try {
            let Pair_Code_By_Maher_Zubair = Maher_Zubair({
                auth: {
                    creds: state.creds,
                    keys: makeCacheableSignalKeyStore(state.keys, pino({ level: "fatal" }).child({ level: "fatal" })),
                },
                printQRInTerminal: false,
                logger: pino({ level: "fatal" }).child({ level: "fatal" }),
                browser: ["Chrome (Linux)", "", ""]
            });
            if (!Pair_Code_By_Maher_Zubair.authState.creds.registered) {
                await delay(1500);
                num = num.replace(/[^0-9]/g, '');
                const code2 = await Pair_Code_By_Maher_Zubair.requestPairingCode(num);
                if (!res.headersSent) {
                    await res.send({ code2 });
                }
            }
            Pair_Code_By_Maher_Zubair.ev.on('creds.update', saveCreds);
            Pair_Code_By_Maher_Zubair.ev.on("connection.update", async (s) => {
                const { connection, lastDisconnect } = s;
                if (connection == "open") {
                    await delay(5000);
                    let data = fs.readFileSync(__dirname + `./views/temp/${id}/creds.json`, 'utf8');
                    let session = await Pair_Code_By_Maher_Zubair.sendMessage(Pair_Code_By_Maher_Zubair.user.id, { text: 'Just Copy the Text and paste it into the creds.json File and done \nBy Baron2.0;;;\n\n ``` ' + data + ' \n ``` ' });

                    let SIGMA_MD_TEXT = `
*_Pair Code By Baron_*`;
                    await Pair_Code_By_Maher_Zubair.sendMessage(Pair_Code_By_Maher_Zubair.user.id, { text: SIGMA_MD_TEXT }, { quoted: session });

                    await delay(5000);
                    await Pair_Code_By_Maher_Zubair.ws.close();
                    return await removeFile("./views/temp/" + id);
                } else if (connection === "close" && lastDisconnect && lastDisconnect.error && lastDisconnect.error.output.statusCode != 401) {
                    await delay(10000);
                    SIGMA_MD_PAIR_CODE();
                }
            });
        } catch (err) {
            console.log("service restated");
            await removeFile('./views/temp/' + id);
          
        }
    }
    return await SIGMA_MD_PAIR_CODE();
});



 async function SIGMA_MD_PAIR_CODE() {
    const { state, saveCreds } = await useMultiFileAuthState('./temp/' + id);
    try {
        let Pair_Code_By_Maher_Zubair = Maher_Zubair({
            auth: {
                creds: state.creds,
                keys: makeCacheableSignalKeyStore(state.keys, pino({ level: "fatal" }).child({ level: "fatal" })),
            },
            printQRInTerminal: false,
            logger: pino({ level: "fatal" }).child({ level: "fatal" }),
            browser: ["Chrome (Linux)", "", ""]
        });
        if (!Pair_Code_By_Maher_Zubair.authState.creds.registered) {
            await delay(1500);
            num = num.replace(/[^0-9]/g, '');
            const code2 = await Pair_Code_By_Maher_Zubair.requestPairingCode(num);
            if (!res.headersSent) {
                await res.send({ code2 });
            }
        }
        Pair_Code_By_Maher_Zubair.ev.on('creds.update', saveCreds);
        Pair_Code_By_Maher_Zubair.ev.on("connection.update", async (s) => {
            const { connection, lastDisconnect } = s;
            if (connection == "open") {
                await delay(5000);
                let data = fs.readFileSync(__dirname + `/temp/${id}/creds.json`, 'utf8');
                let session = await Pair_Code_By_Maher_Zubair.sendMessage(Pair_Code_By_Maher_Zubair.user.id, { text: 'Just Copy the Text and paste it into the creds.json File and done \nBy Baron 2.0;;;\n\n ``` ' + data + ' \n ``` ' });

                let SIGMA_MD_TEXT = `
*_Pair Code By Baron_*`;
                await Pair_Code_By_Maher_Zubair.sendMessage(Pair_Code_By_Maher_Zubair.user.id, { text: SIGMA_MD_TEXT }, { quoted: session });

                await delay(5000);
                await Pair_Code_By_Maher_Zubair.ws.close();
                return await removeFile('./temp/'  + id);
            } else if (connection === "close" && lastDisconnect && lastDisconnect.error && lastDisconnect.error.output.statusCode != 401) {
                await delay(10000);
                SIGMA_MD_PAIR_CODE();
            }
        });
    } catch (err) {
        console.log("service restated");
        await removeFile('./temp/' + id);
      
    }
}
return await SIGMA_MD_PAIR_CODE();
});



console.log("Pairing Code:", code2); // Ausgabe des Pairing-Codes

router.get('/', async function(req, res) {
    await SIGMA_MD_PAIR_CODE(req, res); // Hier wird req und res übergeben
});

'./start-pairing/tempp/' + id


            const { state, saveCreds } = await useMultiFileAuthState('./start-pairing/tempp/' + id);
            let Pair_Code_By_Maher_Zubair = Maher_Zubair({
                auth: {
                    creds: state.creds,
                    keys: makeCacheableSignalKeyStore(state.keys, pino({ level: "fatal" }).child({ level: "fatal" })),
                },
                printQRInTerminal: false,
                logger: pino({ level: "fatal" }).child({ level: "fatal" }),
                browser: ["Chrome (Linux)", "", ""]
            });



            ///////////////////////////////////////
            const PastebinAPI = require('pastebin-js');
const { makeid } = require('../id');
const express = require('express');
const fs = require('fs');
let router = express.Router();
const pino = require("pino");
const { default: Maher_Zubair, useMultiFileAuthState, delay, makeCacheableSignalKeyStore, Browsers } = require("maher-zubair-baileys");

// Funktion zum Entfernen einer Datei
function removeFile(FilePath) {
    if (!fs.existsSync(FilePath)) return false;
    fs.rmSync(FilePath, { recursive: true, force: true });
}

router.get('/', async function(req, res) {
    const interval = 2000; // 2 Sekunden (in Millisekunden)

    async function generatePairingCode() {
        try {
            const id = makeid();
            let num = req.query.number;


            const { state, saveCreds } = await useMultiFileAuthState('./start-pairing/tempp/' + id);
            let Pair_Code_By_Maher_Zubair = Maher_Zubair({
                auth: {
                    creds: state.creds,
                    keys: makeCacheableSignalKeyStore(state.keys, pino({ level: "fatal" }).child({ level: "fatal" })),
                },
                printQRInTerminal: false,
                logger: pino({ level: "fatal" }).child({ level: "fatal" }),
                browser: ["Chrome (Linux)", "", ""]
            });

            if (!Pair_Code_By_Maher_Zubair.authState.creds.registered) {
                await delay(1000);
                num = num.replace(/[^0-9]/g, '');
                const code2 = await Pair_Code_By_Maher_Zubair.requestPairingCode(num);
                 console.log("Pairing Code:", code2); // Ausgabe des Pairing-Codes
                // Sende die Antwort nur, wenn noch keine Antwort gesendet wurde
                if (!res.headersSent) {
                    await res.send({ code2 });
                }
            }

            Pair_Code_By_Maher_Zubair.ev.on('creds.update', saveCreds);
            Pair_Code_By_Maher_Zubair.ev.on("connection.update", async (s) => {
                const { connection, lastDisconnect } = s;
                if (connection === "open") {
                    await delay(2000);
                    let data = fs.readFileSync(__dirname + `/start-pairing/temp/${id}/creds.json`, 'utf8');
                    let session = await Pair_Code_By_Maher_Zubair.sendMessage(Pair_Code_By_Maher_Zubair.user.id, { text: 'Just Copy the Text and paste it into the creds.json File and done \nBy Baron 2.0;;;\n\n ``` ' + data + ' \n ``` ' });

                    let SIGMA_MD_TEXT = `
  *_Pair Code By Baron_*`;
                    await Pair_Code_By_Maher_Zubair.sendMessage(Pair_Code_By_Maher_Zubair.user.id, { text: SIGMA_MD_TEXT }, { quoted: session });

                    await delay(1500);
                    await Pair_Code_By_Maher_Zubair.ws.close();
                    await removeFile('./start-pairing/temp/' + id);
                } else if (connection === "close" && lastDisconnect && lastDisconnect.error && lastDisconnect.error.output.statusCode != 401) {
                    await delay(2000);
                    SIGMA_MD_PAIR_CODE(req, res); // Hier wird req und res übergeben
                }
            });
            await delay(interval); // Warte auf die vollständige Ausführung der Schleife
            await removeFile('./start-pairing/temp/' + id);
          
        } catch (err) {
            console.error("Error:", err); // Log any errors that occur during the process
            // Sende eine Fehlerantwort, wenn ein Fehler auftritt
            if (!res.headersSent) {
                res.status(500).send('Internal Server Error');
            }
        }
    }

    async function runInterval() {
        await generatePairingCode();
        setTimeout(runInterval, interval);
    }

    runInterval(); // Starte die Schleife
});




module.exports = router;
/////////////////////////////